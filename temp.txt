Const vect = [1,2,3,4]

(define obtainRow (param1 param2)
  (lambda (mat) [lambda (row) [map (multLists row) (transpose mat)] ] )
  )


  (cond (< a b) [lambda (c) (c++))] [lambda () ()])

tablaDeSimbolos.stack -> [tablaVariable1, tablaVariable2]

myTable = SymbolTable()
myTable.addSymbol("vect", "vector")
myTable.addSymbol("obtain", "func")
myTable.addSymbol("param1", "argument")
myTable.addSymbol("param2", "argument")
myTable.addSymbol("lambda1", "lambda")
myTable.addSymbol("lambda2", "lambda")
myTable.addSymbol("row", "argumento")
myTable.pop()
myTable.addSymbol("mat", "argumento")

tablaDeSimbolos = {
    'mi_const': {
        type: vector
    },
    'vect': {
        type: vector
    },
    'obtain': {
        type: func,
        tablaVariable: {
            param1: {
                type: argumento
            },
            param2: {
                type: argumento
            },
            'lambda1': {
                type: lambda,
                tablaVariables: {
                    'lambda2': {
                        type: lambda,
                        tablaVariables: {
                            row: {
                                type: argumento
                            }
                        }
                    },
                    mat: {
                        type: argumento
                    }
                }
            },
        }
    },
}
